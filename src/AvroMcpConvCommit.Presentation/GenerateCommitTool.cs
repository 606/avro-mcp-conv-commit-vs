using ModelContextProtocol.Server;
using System.ComponentModel;
using AvroMcpConvCommit.Application;
using AvroMcpConvCommit.Domain;

[McpServerToolType]
public static class GenerateCommitTool
{
    [McpServerTool, Description("Generates a conventional commit message.")]
    public static string GenerateCommit(
        ICommitGenerator generator,
        [Description("The commit description")] string description,
        [Description("The commit type (feat, fix, docs, etc.)")] string type,
        [Description("Optional scope")] string? scope = null,
        [Description("Optional body")] string? body = null,
        [Description("Optional footer")] string? footer = null,
        [Description("Whether it's a breaking change")] bool isBreaking = false,
        [Description("Include attribution that this was generated by the MCP server")] bool includeAttribution = false)
    {
        if (!Enum.TryParse<CommitType>(type, true, out var commitType))
        {
            return $"Invalid commit type: {type}";
        }

        // Add attribution footer if requested
        var attributionFooter = includeAttribution ? 
            (string.IsNullOrEmpty(footer) ? "Generated-by: avro-mcp-conv-commit" : $"{footer}\n\nGenerated-by: avro-mcp-conv-commit") : 
            footer;

        var message = generator.Generate(description, commitType, scope, body, attributionFooter, isBreaking);
        return generator.GenerateConventionalString(message);
    }
}