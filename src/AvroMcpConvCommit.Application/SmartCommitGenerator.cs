using AvroMcpConvCommit.Domain;

namespace AvroMcpConvCommit.Application;

public class SmartCommitGenerator : ISmartCommitGenerator
{
    private readonly IGitService _gitService;
    private readonly ICommitGenerator _commitGenerator;

    public SmartCommitGenerator(IGitService gitService, ICommitGenerator commitGenerator)
    {
        _gitService = gitService;
        _commitGenerator = commitGenerator;
    }

    public async Task<string> GenerateSmartCommitAsync(string? customDescription = null)
    {
        // Get current git status
        var status = await _gitService.GetGitStatusAsync();
        
        if (status.Count == 0)
        {
            return "No changes to commit.";
        }

        // Analyze changes to determine commit type
        var commitType = await _gitService.AnalyzeChangesAsync();

        // Generate description based on changes or use custom description
        var description = customDescription ?? GenerateDescriptionFromChanges(status, commitType);

        // Create commit message
        var commitMessage = _commitGenerator.Generate(description, commitType);
        
        // Add attribution footer to indicate this was generated by the MCP server
        var conventionalString = _commitGenerator.GenerateConventionalString(commitMessage);
        return conventionalString + "\n\nGenerated-by: avro-mcp-conv-commit";
    }

    private string GenerateDescriptionFromChanges(List<string> status, CommitType commitType)
    {
        // Analyze the changes to create a meaningful description
        var modifiedFiles = status.Count(line => line.StartsWith("M "));
        var addedFiles = status.Count(line => line.StartsWith("A ") || line.StartsWith("?? "));
        var deletedFiles = status.Count(line => line.StartsWith("D "));
        var renamedFiles = status.Count(line => line.StartsWith("R "));

        var descriptions = new List<string>();

        if (addedFiles > 0)
            descriptions.Add($"add {addedFiles} file{(addedFiles > 1 ? "s" : "")}");
        if (modifiedFiles > 0)
            descriptions.Add($"update {modifiedFiles} file{(modifiedFiles > 1 ? "s" : "")}");
        if (deletedFiles > 0)
            descriptions.Add($"remove {deletedFiles} file{(deletedFiles > 1 ? "s" : "")}");
        if (renamedFiles > 0)
            descriptions.Add($"rename {renamedFiles} file{(renamedFiles > 1 ? "s" : "")}");

        var action = string.Join(", ", descriptions);

        // Add context based on commit type
        var context = commitType switch
        {
            CommitType.Feat => "new feature",
            CommitType.Fix => "bug fix",
            CommitType.Docs => "documentation",
            CommitType.Test => "tests",
            CommitType.Refactor => "code refactoring",
            CommitType.Style => "code style",
            CommitType.Chore => "maintenance",
            CommitType.Build => "build configuration",
            CommitType.Ci => "CI/CD",
            CommitType.Perf => "performance improvement",
            CommitType.Revert => "revert changes",
            _ => "changes"
        };

        return $"{action} - {context}";
    }
}